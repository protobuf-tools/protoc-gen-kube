//go:build ignore

// Copyright 2019 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

package main

import (
	"context"
	"log"
	"os"

	"github.com/go-logr/logr"
	"github.com/go-logr/zapr"
	"go.uber.org/zap"
	"k8s.io/gengo/args"

	"github.com/protobuf-tools/protoc-gen-kube/pkg/generator/kubetype/generators"
	"github.com/protobuf-tools/protoc-gen-kube/pkg/generator/kubetype/scanner"
)

func main() {
	arguments := args.Default()

	arguments.GeneratedByCommentTemplate = "// Code generated by kubetype-gen. DO NOT EDIT."

	// Don't default the file header
	// arguments.GoHeaderFilePath = filepath.Join(args.DefaultSourceTree(), "github.com/protobuf-tools/protoc-gen-kube/pkg/generator/kubetype/boilerplate.go.txt")

	z, err := zap.NewDevelopment()
	if err != nil {
		log.Fatal(err)
	}
	logf := zapr.NewLogger(z)
	ctx := logr.NewContext(context.Background(), logf)
	scan := scanner.New(ctx)

	if err := arguments.Execute(
		generators.NameSystems("", nil),
		generators.DefaultNameSystem(),
		scan.Scan,
	); err != nil {
		logf.Error(err, "error")
		os.Exit(1)
	}
	logf.V(2).Info("Completed successfully.")
}
