// Copyright 2021 The protobuf-tools Authors
// SPDX-License-Identifier: Apache-2.0

// Command protoc-gen-kube generates the Kubernetes controller APIs from Protocol Buffer schemas.
package main

import (
	"context"
	"fmt"
	"os"
	"path/filepath"

	"github.com/go-logr/logr"
	"github.com/go-logr/zapr"
	"github.com/spf13/pflag"
	"go.uber.org/zap"
	"k8s.io/gengo/args"
	"k8s.io/gengo/generator"
	klog "k8s.io/klog/v2"

	"github.com/protobuf-tools/protoc-gen-kube/pkg/generator/kubetype"
	"github.com/protobuf-tools/protoc-gen-kube/pkg/scanner"
	"github.com/protobuf-tools/protoc-gen-kube/pkg/version"
)

var flagVersion bool

func main() {
	if err := gen(); err != nil {
		fmt.Fprintf(os.Stderr, "protoc-gen-kube: %v\n", err)
	}
}

func gen() error {
	z, err := zap.NewDevelopment()
	if err != nil {
		return fmt.Errorf("create zap development logger: %w", err)
	}

	// setup logr
	logf := zapr.NewLogger(z)
	ctx = logr.NewContext(context.Background(), logf)

	// inject third-party packages klog
	klog.SetLogger(logf)

	// setup *args.GeneratorArgs
	ga := args.Default()

	// setup flags
	pflag.BoolVarP(&flagVersion, "version", "v", false, fmt.Sprintf("print %s version", filepath.Base(os.Args[0])))
	ga.AddFlags(pflag.CommandLine)
	pflag.Parse()

	// show version if enabled -version flag
	if flagVersion {
		fmt.Fprintf(os.Stderr, "protoc-gen-kube@%s\n", version.Version())
		os.Exit(0)
	}

	// setup template
	ga.GeneratedByCommentTemplate = `// Code generated by protoc-gen-kube. DO NOT EDIT.`
	ga.GoHeaderFilePath = filepath.Join(args.DefaultSourceTree(), "hack", "boilerplate", "boilerplate.go.txt")

	// execute
	builder, err := ga.NewBuilder()
	if err != nil {
		return fmt.Errorf("failed making a parser: %w", err)
	}

	// pass through the flag on whether to include *_test.go files
	ga.SetArgsToBuilder(builder)

	c, err := generator.NewContext(builder, kubetype.NameSystems("", nil), kubetype.DefaultNameSystem())
	if err != nil {
		return fmt.Errorf("failed making a context: %w", err)
	}

	// update generator.Context via args
	ga.SetArgsToContext(c)

	packages := scanner.New(ctx, c, ga).Packages()
	if err := c.ExecutePackages(ga.OutputBase, packages); err != nil {
		return fmt.Errorf("failed executing generator: %w", err)
	}

	logf.Info("completed successfully")

	return nil
}
